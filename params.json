{"tagline":"Python implementation for generating Tiny URL- and bit.ly-like URLs.","body":"Short URL Generator\r\n===================\r\n\r\nPython implementation for generating Tiny URL- and bit.ly-like URLs.\r\n\r\nA bit-shuffling approach is used to avoid generating consecutive, predictable\r\nURLs.  However, the algorithm is deterministic and will guarantee that no\r\ncollisions will occur.\r\n\r\nThe URL alphabet is fully customizable and may contain any number of\r\ncharacters.  By default, digits and lower-case letters are used, with\r\nsome removed to avoid confusion between characters like o, O and 0.  The\r\ndefault alphabet is shuffled and has a prime number of characters to further\r\nimprove the results of the algorithm.\r\n\r\nThe block size specifies how many bits will be shuffled.  The lower BLOCK_SIZE\r\nbits are reversed.  Any bits higher than BLOCK_SIZE will remain as is.\r\nBLOCK_SIZE of 0 will leave all bits unaffected and the algorithm will simply\r\nbe converting your integer to a different base.\r\n\r\nThe intended use is that incrementing, consecutive integers will be used as\r\nkeys to generate the short URLs.  For example, when creating a new URL, the\r\nunique integer ID assigned by a database could be used to generate the URL\r\nby using this module.  Or a simple counter may be used.  As long as the same\r\ninteger is not used twice, the same short URL will not be generated twice.\r\n\r\nThe module supports both encoding and decoding of URLs. The min_length\r\nparameter allows you to pad the URL if you want it to be a specific length.\r\n\r\nSample Usage:\r\n```\r\n>>> import short_url\r\n>>> url = short_url.encode_url(12)\r\n>>> print url\r\nLhKA\r\n>>> key = short_url.decode_url(url)\r\n>>> print key\r\n12\r\n```\r\nUse the functions in the top-level of the module to use the default encoder.\r\nOtherwise, you may create your own UrlEncoder object and use its encode_url\r\nand decode_url methods.\r\n\r\n\r\nInstall\r\n----\r\n**short_url** is also available at pypi:\r\n\r\n[http://pypi.python.org/pypi/short_url](http://pypi.python.org/pypi/short_url)\r\n\r\nGive a try to your fingers:  \r\n`$ pip install short_url`\r\n\r\nAnd done ;)\r\n\r\n***\r\n\r\n<table>\r\n    <tr>\r\n      <td>Source</td>\r\n      <td>https://github.com/Alir3z4/short_url</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Website</td>\r\n      <td>http://alir3z4.github.com/short_url</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Issues</td>\r\n      <td>https://github.com/Alir3z4/short_url/issues</td>\r\n    </tr>\r\n    <tr>\r\n      <td>PyPi</td>\r\n      <td>http://pypi.python.org/pypi/short_url</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Author</td>\r\n      <td>Michael Fogleman</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Maintainer</td>\r\n      <td>Alireza Savand</td>\r\n    </tr>\r\n    <tr>\r\n      <td>License</td>\r\n      <td>MIT</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Link</td>\r\n      <td>http://code.activestate.com/recipes/576918/</td>\r\n    </tr>\r\n</table>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"short_url"}